{"version":3,"sources":["assets/apple_1k.hdr","assets/autoshop_1k.hdr","assets/glb/m2tlya.glb","assets/images/loading/levAR_logo.svg","redux/reducers/index.js","redux/reducers/loadingReducer.js","containers/Shade/Shade.js","components/ScreenLoader/index.js","containers/App/App.js","redux/actions/index.js","serviceWorker.js","index.js"],"names":["module","exports","rootReducer","combineReducers","loading","state","action","type","style","height","width","Shade","props","startStats","console","log","stats","Stats","StatsStatus","mount","appendChild","dom","startlevARviewer","RendererAAStatus","PCLightsStatus","ToneMappingConfig","ToneMappingExposure","ColorSpace","perfStatus","clientWidth","clientHeight","scene","THREE","camera","renderer","setSize","setPixelRatio","window","devicePixelRatio","domElement","controls","OrbitControls","physicallyCorrectLights","toneMapping","toneMappingExposure","outputEncoding","levARpmremGenerator","RGBELoader","setDataType","load","hdrENV","texture","envMap","fromEquirectangular","dispose","environment","compileEquirectangularShader","hdrBKD","bkdMap","background","GLTFLoader","glbAsset","glb","add","position","set","target","enableDamping","dampingFactor","screenSpacePanning","update","levARcomposer","EffectComposer","addPass","RenderPass","startLighting","RectAreaLightUniformsLib","init","rectLight","rectLightHelper","LightHelperStatus","rotation","x","degToRad","RectAreaLightHelper","z","y","forEach","i","castShadow","startRefGeo","heroGeometry","heroMaterialMirror","color","metalness","roughness","side","flatShading","heroMaterialFlat","heroMaterialGlossy","heroSphereMirror","heroSphereFlat","heroSphereGlossy","renderLoop","requestID","requestAnimationFrame","render","handleWindowResize","aspect","updateProjectionMatrix","this","addEventListener","removeEventListener","cancelAnimationFrame","className","ref","Component","ScreenLoader","src","loadingImage","alt","App","fetchImage","a","async","fetch","response","data","json","setLoading","connect","dispatch","Boolean","location","hostname","match","store","createStore","composeWithDevTools","applyMiddleware","thunk","shadeFlow","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a52c7ada.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/apple_1k.1b4ec3dd.hdr\";","module.exports = __webpack_public_path__ + \"static/media/autoshop_1k.72921fcf.hdr\";","module.exports = __webpack_public_path__ + \"static/media/m2tlya.6863ebb6.glb\";","module.exports = __webpack_public_path__ + \"static/media/levAR_logo.629d3eb9.svg\";","import { combineReducers } from \"redux\";\r\n\r\nimport { loadingReducer } from \"./loadingReducer\";\r\n\r\nexport const rootReducer = combineReducers({\r\n  loading: loadingReducer\r\n})\r\n","export const loadingReducer = (state = false, action) => {\r\n  switch (action.type) {\r\n    case 'SET_LOADING':\r\n      return action.loading;\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport * as THREE from \"three\";\r\nimport Stats from 'three/examples/jsm/libs/stats.module.js';\r\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\r\nimport { RGBELoader } from 'three/examples/jsm/loaders/RGBELoader.js';\r\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader.js';\r\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer.js';\r\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass.js';\r\nimport { RectAreaLightUniformsLib } from 'three/examples/jsm/lights/RectAreaLightUniformsLib.js';\r\nimport { RectAreaLightHelper } from 'three/examples/jsm/helpers/RectAreaLightHelper.js';\r\n\r\nimport hdrBKD from \"../../assets/apple_1k.hdr\"; //Environment (lights objects)\r\nimport hdrENV from \"../../assets/autoshop_1k.hdr\";  //Background (visible in viewport)\r\nimport glbAsset from \"../../assets/glb/m2tlya.glb\"; //Zipped GLTF AR Asset\r\n\r\nconst style = {\r\n    height: \"1000px\",\r\n    width: \"100%\"\r\n    \r\n};\r\n\r\nclass Shade extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      StatsStatus: \"\",\r\n      LightHelperStatus: true,\r\n      RendererAAStatus: true,\r\n      PCLightsStatus: true,\r\n      ToneMappingConfig: THREE.ACESFilmicToneMapping,\r\n      ToneMappingExposure: 3,\r\n      ColorSpace: THREE.LinearEncoding\r\n\r\n    };\r\n  }\r\n\r\n   componentDidMount() {\r\n    console.log('You reached componentDidMount');\r\n    \r\n    this.startStats();\r\n    this.startlevARviewer();\r\n    // this.startLighting();\r\n    this.startRefGeo();\r\n    this.renderLoop();\r\n    /*Set is used for \"invisible\" high-level scene construction.\r\n    Start is used for objects in said scene.\r\n    Handle is for making later changes to a set/start, or when an external file (glb, hdr) is used in the method\r\n    Loops do not have prefixes\r\n    */\r\n\r\n    window.addEventListener('resize', this.handleWindowResize);\r\n  };\r\n\r\n  componentWillUnmount() {\r\n    console.log('You reached componentWillUnmount');\r\n    window.removeEventListener('resize', this.handleWindowResize);\r\n    window.cancelAnimationFrame(this.requestID);\r\n    this.controls.dispose();\r\n  };\r\n\r\n  startStats = () => {\r\n    console.log('startStats initiated');\r\n    this.stats = new Stats();\r\n    this.StatsStatus = true;\r\n    this.mount.appendChild( this.stats.dom );\r\n  };\r\n  startlevARviewer = () => {\r\n    const { RendererAAStatus } = this.state;\r\n    const { PCLightsStatus } = this.state;\r\n    const { ToneMappingConfig } = this.state;\r\n    const { ToneMappingExposure } = this.state;\r\n    const { ColorSpace } = this.state;\r\n\r\n    console.log('setScene initiated');\r\n\r\n    this.perfStatus = 0; //0 = Linear High, 1 = sRGB High, 2 = sRGB Low\r\n    this.width = this.mount.clientWidth;\r\n    this.height = this.mount.clientHeight;\r\n    this.scene = new THREE.Scene();\r\n\r\n    console.log('startCamera initiated');\r\n    \r\n    this.camera = new THREE.PerspectiveCamera(75,this.width / this.height,0.2,3000);\r\n\r\n    console.log('setRenderer initiated');\r\n\r\n    this.renderer = new THREE.WebGLRenderer( { RendererAAStatus } );\r\n    this.renderer.setSize(this.width,this.height);\r\n    this.renderer.setPixelRatio(window.devicePixelRatio);\r\n    \r\n    // mount using React ref\r\n    \r\n    this.mount.appendChild(this.renderer.domElement); \r\n  \r\n    console.log('setControls initiated');\r\n\r\n    this.controls = new OrbitControls(this.camera,this.mount);\r\n\r\n    console.log('setEnvironment initiated');\r\n\r\n    \r\n    this.renderer.physicallyCorrectLights = PCLightsStatus;\r\n    this.renderer.toneMapping = ToneMappingConfig;\r\n    this.renderer.toneMappingExposure = ToneMappingExposure;\r\n    this.renderer.outputEncoding = ColorSpace;\r\n    \r\n    this.levARpmremGenerator = new THREE.PMREMGenerator(this.renderer);\r\n\r\n    new RGBELoader()\r\n    .setDataType(THREE.UnsignedByteType)\r\n    .load(hdrENV, (texture) => {\r\n    \tvar envMap = this.levARpmremGenerator.fromEquirectangular(texture).texture;\r\n    \tthis.levARpmremGenerator.dispose();\r\n\r\n    \tthis.scene.environment = envMap;\r\n    }\r\n    );\r\n    this.levARpmremGenerator.compileEquirectangularShader();\r\n\r\n    new RGBELoader()\r\n    .setDataType(THREE.UnsignedByteType)\r\n    .load(hdrBKD, (texture) => {\r\n    \tvar bkdMap = this.levARpmremGenerator.fromEquirectangular(texture).texture;\r\n    \tthis.levARpmremGenerator.dispose();\r\n\r\n    \tthis.scene.background = bkdMap;\r\n    }\r\n    );\r\n    this.levARpmremGenerator.compileEquirectangularShader();\r\n\r\n    console.log('handleGLTF initiated');\r\n\r\n    new GLTFLoader().load(glbAsset, (glb) => {\r\n  \t\tthis.scene.add(glb.scene);\r\n    });\r\n    \r\n    console.log('handleCamera initiated');\r\n    this.camera.position.set( 0, 15, 50 );\r\n    this.controls.target.set(0,3,0);\r\n    this.controls.enableDamping = true;\r\n    this.controls.dampingFactor = 0.5;\r\n    this.controls.screenSpacePanning = true;\r\n    this.controls.update();\r\n\r\n    this.levARcomposer = new EffectComposer(this.renderer);\r\n    this.levARcomposer.addPass( new RenderPass( this.scene, this.camera ) );\r\n    \r\n  };\r\n\r\n  startLighting = () => {\r\n    console.log('startLighting initiated');\r\n    if (this.perfStatus < 2) {\r\n      RectAreaLightUniformsLib.init();\r\n    \r\n      const rectLight = [];\r\n      const rectLightHelper = [];\r\n      const { LightHelperStatus } = this.state;\r\n  \r\n      const rectlLightColor = 0xFFFFFF;\r\n      const rectlLightColorblue = 0x0000FF;\r\n      const rectlLightColororange = 0xFFA500;\r\n      const rectLightIntensity = 70;\r\n      const rectLightWidth = 20;\r\n      const rectLightHeight = 10;\r\n  \r\n      rectLight[0] = new THREE.RectAreaLight(rectlLightColor, rectLightIntensity, rectLightWidth, rectLightHeight);\r\n      rectLight[0].position.set(0, 80, 0);\r\n      rectLight[0].rotation.x = THREE.Math.degToRad(-90);\r\n      rectLightHelper[0] = new RectAreaLightHelper(rectLight[0]);\r\n      rectLight[0].add(rectLightHelper[0]);\r\n  \r\n      rectLight[1] = new THREE.RectAreaLight(rectlLightColor, rectLightIntensity, rectLightWidth, rectLightHeight);\r\n      rectLight[1].position.set(0, -60, 0);\r\n      rectLight[1].rotation.x = THREE.Math.degToRad(90);\r\n      rectLightHelper[1] = new RectAreaLightHelper(rectLight[1]);\r\n  \r\n      rectLight[2] = new THREE.RectAreaLight(rectlLightColororange, rectLightIntensity, rectLightWidth, rectLightHeight);\r\n      rectLight[2].position.set(60, 35, 60);\r\n      rectLight[2].rotation.z = THREE.Math.degToRad(90);\r\n      rectLight[2].rotation.y = THREE.Math.degToRad(45);\r\n      rectLightHelper[2] = new RectAreaLightHelper(rectLight[2]);\r\n  \r\n      rectLight[3] = new THREE.RectAreaLight(rectlLightColorblue, rectLightIntensity, rectLightWidth, rectLightHeight);\r\n      rectLight[3].position.set(60, -5, -60);\r\n      rectLight[3].rotation.z = THREE.Math.degToRad(90);\r\n      rectLight[3].rotation.y = THREE.Math.degToRad(135);\r\n      rectLightHelper[3] = new RectAreaLightHelper(rectLight[3]);\r\n      \r\n      rectLight[4] = new THREE.RectAreaLight(rectlLightColorblue, rectLightIntensity, rectLightWidth, rectLightHeight);\r\n      rectLight[4].position.set(-60, -5, 60);\r\n      rectLight[4].rotation.z = THREE.Math.degToRad(90);\r\n      rectLight[4].rotation.y = THREE.Math.degToRad(-45);\r\n      rectLightHelper[4] = new RectAreaLightHelper(rectLight[4]);\r\n      \r\n      rectLight[5] = new THREE.RectAreaLight(rectlLightColororange, rectLightIntensity, rectLightWidth, rectLightHeight);\r\n      rectLight[5].position.set(-60, 35, -60);\r\n      rectLight[5].rotation.z = THREE.Math.degToRad(90);\r\n      rectLight[5].rotation.y = THREE.Math.degToRad(-135);\r\n      rectLightHelper[5] = new RectAreaLightHelper(rectLight[5]);\r\n  \r\n      if (LightHelperStatus) {\r\n        rectLight[1].add(rectLightHelper[1]);\r\n        rectLight[2].add(rectLightHelper[2]);\r\n        rectLight[3].add(rectLightHelper[3]);\r\n        rectLight[4].add(rectLightHelper[4]);\r\n        rectLight[5].add(rectLightHelper[5]);\r\n      }\r\n  \r\n      rectLight.forEach(i => {\r\n        i.castShadow = true;\r\n        this.scene.add(i);\r\n      })\r\n    }\r\n    \r\n    \r\n  };\r\n\r\n  startRefGeo = () => {\r\n    console.log('startRefGeo initiated');\r\n\r\n    const heroGeometry = new THREE.SphereGeometry(4, 64, 64);\r\n\r\n    const heroMaterialMirror = new THREE.MeshStandardMaterial( {\r\n      color: 0x7C7C7C,\r\n      metalness: 1,\r\n      roughness: 0,\r\n      side: THREE.DoubleSide,\r\n      flatShading: false\r\n    });\r\n\r\n    const heroMaterialFlat = new THREE.MeshStandardMaterial( {\r\n      color: 0x7C7C7C,\r\n      metalness: 0,\r\n      roughness: 0.8,\r\n      side: THREE.DoubleSide,\r\n      flatShading: false\r\n    });\r\n\r\n    const heroMaterialGlossy = new THREE.MeshStandardMaterial( {\r\n      color: 0x7C7C7C,\r\n      metalness: 0,\r\n      roughness: 0.05,\r\n      side: THREE.DoubleSide,\r\n      flatShading: false\r\n    });\r\n\r\n    this.heroSphereMirror = new THREE.Mesh(heroGeometry, heroMaterialMirror);\r\n    this.heroSphereMirror.position.set(0,-10,0);\r\n\r\n    this.heroSphereFlat = new THREE.Mesh(heroGeometry, heroMaterialFlat);\r\n    this.heroSphereFlat.position.set(0,-10,12);\r\n\r\n    this.heroSphereGlossy = new THREE.Mesh(heroGeometry, heroMaterialGlossy);\r\n    this.heroSphereGlossy.position.set(0,-10,-12);\r\n    this.scene.add(this.heroSphereMirror, this.heroSphereFlat, this.heroSphereGlossy);\r\n  };\r\n\r\n  renderLoop = () => {\r\n    this.requestID = window.requestAnimationFrame(this.renderLoop);\r\n    this.levARcomposer.render();\r\n    if (this.StatsStatus) {\r\n      this.stats.update();\r\n    }\r\n    // console.log(this.perfStatus);\r\n  };\r\n\r\n  handleWindowResize = () => {\r\n    this.width = this.mount.clientWidth;\r\n    this.height = this.mount.clientHeight;\r\n\r\n    this.renderer.setSize(this.width,this.height);\r\n    this.camera.aspect = this.width / this.height;\r\n\r\n    // Note that after making changes to most of camera properties you have to call\r\n    // .updateProjectionMatrix for the changes to take effect.\r\n    this.camera.updateProjectionMatrix();\r\n  };\r\n\r\n  render() {\r\n    return <div style={style} className=\"Shade\" ref={ref => (this.mount = ref)} />;\r\n  }\r\n}\r\n\r\nexport default Shade;\r\n","import React from 'react';\r\nimport loadingImage from '../../assets/images/loading/levAR_logo.svg';\r\n\r\nconst ScreenLoader = () => {\r\n  return (\r\n    <div className='ScreenLoader'>\r\n      <img src={loadingImage} className='Loading-logo' alt='loading' />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ScreenLoader;\r\n","import React, { Component } from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport * as actions from \"../../redux/actions\";\r\n\r\nimport Shade from '../Shade/Shade';\r\nimport ScreenLoader from \"../../components/ScreenLoader\";\r\n\r\nclass App extends Component {\r\n\r\n  componentDidMount() {\r\n    console.log('app mounted');\r\n    this.props.setLoading(true)\r\n    this.fetchImage()\r\n    this.props.setLoading(false)\r\n  }\r\n\r\n  fetchImage = async () => {\r\n    const url = 'https://shopifydependencies.s3.amazonaws.com/ar/dc_glb.glb'\r\n    try {\r\n\r\n      const response = await fetch(url)\r\n      const data = response.json()\r\n      console.log(data);\r\n    } catch(error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { loading } = this.props;\r\n\r\n    return (\r\n      <div className=\"App\">\r\n        {\r\n          !loading ? (\r\n            <div className=\"modal\">\r\n               <Shade />\r\n            </div>\r\n          ) : (\r\n            <ScreenLoader />\r\n          )\r\n        }\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n\r\nexport const mapStateToProps = state => ({\r\n  loading: state.loading,\r\n});\r\n\r\nexport const mapDispatchToProps = dispatch => ({\r\n  setLoading: data => dispatch(actions.setLoading(data)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","// #START Loading Actions\r\nexport const setLoading = loading => ({\r\n  type: \"SET_LOADING\",\r\n  loading\r\n});\r\n// #END Loading Actions\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport { rootReducer } from './redux/reducers';\r\nimport { createStore, applyMiddleware } from 'redux';\r\nimport { Provider } from 'react-redux';\r\n\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport thunk from 'redux-thunk';\r\n\r\nimport './index.scss';\r\nimport App from './containers/App/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  composeWithDevTools(applyMiddleware(thunk)),\r\n)\r\n\r\nconst shadeFlow = (\r\n  <Provider store={store}>\r\n      <App />\r\n  </Provider>\r\n)\r\n\r\n\r\nReactDOM.render(shadeFlow, document.getElementById('root'));\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}